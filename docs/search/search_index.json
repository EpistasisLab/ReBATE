{
    "docs": [
        {
            "location": "/",
            "text": "ReBATE\n includes stand-alone Python code to run any of the included/available \nRelief-Based algorithms (RBAs)\n \ndesigned for feature weighting/selection as part of a machine learning pipeline (supervised learning). Presently this includes the following core RBAs: ReliefF, SURF, SURF\n, and MultiSURF\n. Additionally, an implementation of the iterative TuRF mechanism is included. \nIt is still under active development\n and we encourage you to check back on this repository regularly for updates.\n\n\nThese algorithms offer a computationally efficient way to perform feature selection that is sensitive to feature interactions as well as simple univariate associations, unlike most currently available filter-based feature selection methods. The main benefit of Relief algorithms is that they identify feature interactions without having to exhaustively check every pairwise interaction, thus taking significantly less time than exhaustive pairwise search.\n\n\nEach core algorithm outputs an ordered set of feature names along with respective feature scores (i.e. weights). Certain algorithms require user specified run parameters (e.g. ReliefF requires the user to specify some 'k' number of nearest neighbors). \n\n\nRelief algorithms are commonly applied to genetic analyses, where epistasis (i.e., feature interactions) is common. However, the algorithms implemented in this package can be applied to almost any supervised classification data set and supports:\n\n\n\n\n\n\nFeature sets that are discrete/categorical, continuous-valued or a mix of both\n\n\n\n\n\n\nData with missing values\n\n\n\n\n\n\nBinary endpoints (i.e., classification)\n\n\n\n\n\n\nMulti-class endpoints (i.e., classification)\n\n\n\n\n\n\nContinuous endpoints (i.e., regression)\n\n\n\n\n\n\nBuilt into this code, is a strategy to 'automatically' detect from the loaded data, these relevant characteristics.\n\n\nOf our two initial ReBATE software releases, this stand-alone version primarily focuses on improving run-time with the use of Cython. \nThis code is most appropriate for more experienced users or those primarily interested in reducing analysis run time. \n\n\nWe recommend that scikit-learn users, Windows operating system users, beginners, or those looking for the most recent ReBATE developments to instead use our alternate \nscikit-rebate\n implementation. ReBATE can be run on Windows with some additional installation steps and possible troubleshooting outlined below.",
            "title": "Home"
        },
        {
            "location": "/installing/",
            "text": "Prerequisites\n\n\nAll of the necessary Python packages can be installed via the \nAnaconda Python distribution\n, which we strongly recommend that you use. We also strongly recommend that you use Python 3 over Python 2 if you're given the choice.\n\n\nReBATE requires that the following external Python packages be installed (all included in Anaconda):\n\n\nargparse, time, sys, os, IO, Common, numpy, math, pandas, scipy.spatial.distance, operator, csv, distutils.core, distutils.extension, Cython.Distutils, datetime\n\n\nNumPy and SciPy can be installed in Anaconda via the command:\n\n\nconda install numpy scipy\n\n\n\n\nAdditional Steps For Windows Users\n\n\nHere we discuss the additional prerequisites for running ReBATE on a Windows operating system. First you will need a command line terminal for Windows (e.g. \nCygwin\n, or \nGitBash\n) with Anaconda properly installed. From this terminal you can compile the Cython code, and run ReBATE. Second you will need a C compiler for compiling the Cython code once before being able to run ReBATE on your Windows machine. \n\n\nThere are a number of possible ways to get the C compiler working on your Windows terminal, all of which will depend on the version of windows, the version of python/Anaconda, and whether it is 32-bit or 64-bit. Be aware that there may be some troubleshooting in getting the C compiler operational in your command line terminal. Below we outline steps that worked for us in the spring of 2018 using Windows 10, and Python 3.5.2 with Anaconda 4.0 (64-bit), using GitBash as our terminal.\n\n\n1.) Ensure that setuptools is updated. Run the following in your terminal: pip install -upgrade setuptools\n\n\n2.) \nDownload/install Visual Studio Community 2017\n. This includes the necessary C compiler. It is not necessary to install all of the visual studio components, as this can be slow and take up a good deal of space. However make sure that you download and install the 'Desktop Development with C++' and the 'Python Development' workloads as detailed at the following \nlink\n.  Within the Python Development workload, also select the box on the right for Python native development tools. \n\n\n3.) Once Visual Studio has been successfully installed, there was a remaining bug that required some troubleshooting for the C compiler to be found by the terminal. The following fix worked for us: \n\n\n(A) \nAdd this to your PATH environment variables\n: C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64   \n\n\n(B) Copy these two files (rc.exe and rcdll.dll) from (C:\\Program Files (x86)\\Windows Kits\\8.1\\bin\\x86) to (C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin)\n\n\n4.) At this point you should be able to compile Cython as described below.\n\n\nCompile Cython\n\n\nOnce these prerequisites are installed, it will be necessary to compile the Cython code on the respective operating system within which ReBATE will be run. It is only necessary to do this once, not every time ReBATE is run. This happens in two stages (1) a .pyx file is compiled by cython to a .c file, then (2) the .c file is compiled by a C compiler to a .so file (or a .pyd file for Windows). \n\n\nSimply run the following file included with ReBATE to produce the .c and (.so or .pyd) files:  ./make.sh\n\n\nIf there is need to recompile the Cython files, first remove the previous .c and (.so or .pyd) files by running: ./clean.sh",
            "title": "Installation"
        },
        {
            "location": "/installing/#prerequisites",
            "text": "All of the necessary Python packages can be installed via the  Anaconda Python distribution , which we strongly recommend that you use. We also strongly recommend that you use Python 3 over Python 2 if you're given the choice.  ReBATE requires that the following external Python packages be installed (all included in Anaconda):  argparse, time, sys, os, IO, Common, numpy, math, pandas, scipy.spatial.distance, operator, csv, distutils.core, distutils.extension, Cython.Distutils, datetime  NumPy and SciPy can be installed in Anaconda via the command:  conda install numpy scipy",
            "title": "Prerequisites"
        },
        {
            "location": "/installing/#additional-steps-for-windows-users",
            "text": "Here we discuss the additional prerequisites for running ReBATE on a Windows operating system. First you will need a command line terminal for Windows (e.g.  Cygwin , or  GitBash ) with Anaconda properly installed. From this terminal you can compile the Cython code, and run ReBATE. Second you will need a C compiler for compiling the Cython code once before being able to run ReBATE on your Windows machine.   There are a number of possible ways to get the C compiler working on your Windows terminal, all of which will depend on the version of windows, the version of python/Anaconda, and whether it is 32-bit or 64-bit. Be aware that there may be some troubleshooting in getting the C compiler operational in your command line terminal. Below we outline steps that worked for us in the spring of 2018 using Windows 10, and Python 3.5.2 with Anaconda 4.0 (64-bit), using GitBash as our terminal.  1.) Ensure that setuptools is updated. Run the following in your terminal: pip install -upgrade setuptools  2.)  Download/install Visual Studio Community 2017 . This includes the necessary C compiler. It is not necessary to install all of the visual studio components, as this can be slow and take up a good deal of space. However make sure that you download and install the 'Desktop Development with C++' and the 'Python Development' workloads as detailed at the following  link .  Within the Python Development workload, also select the box on the right for Python native development tools.   3.) Once Visual Studio has been successfully installed, there was a remaining bug that required some troubleshooting for the C compiler to be found by the terminal. The following fix worked for us:   (A)  Add this to your PATH environment variables : C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64     (B) Copy these two files (rc.exe and rcdll.dll) from (C:\\Program Files (x86)\\Windows Kits\\8.1\\bin\\x86) to (C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin)  4.) At this point you should be able to compile Cython as described below.",
            "title": "Additional Steps For Windows Users"
        },
        {
            "location": "/installing/#compile-cython",
            "text": "Once these prerequisites are installed, it will be necessary to compile the Cython code on the respective operating system within which ReBATE will be run. It is only necessary to do this once, not every time ReBATE is run. This happens in two stages (1) a .pyx file is compiled by cython to a .c file, then (2) the .c file is compiled by a C compiler to a .so file (or a .pyd file for Windows).   Simply run the following file included with ReBATE to produce the .c and (.so or .pyd) files:  ./make.sh  If there is need to recompile the Cython files, first remove the previous .c and (.so or .pyd) files by running: ./clean.sh",
            "title": "Compile Cython"
        },
        {
            "location": "/using/",
            "text": "Run rebate.py -h for all the available options. \n\n\nFor information on how to run the different Relief algorithms available in this package and how to use them, please refer to our \nusage documentation\n\n\nFurther instructions and examples will be provided in the near future.",
            "title": "Using skrebate"
        },
        {
            "location": "/examples/GAMETES_Example/",
            "text": "Under Construction",
            "title": "GAMETES Example"
        },
        {
            "location": "/contributing/",
            "text": "We welcome you to \ncheck the existing issues\n for bugs or enhancements to work on. If you have an idea for an extension to ReBATE, please \nfile a new issue\n so we can discuss it.\n\n\nProject layout\n\n\nThe latest stable release of ReBATE is on the \nmaster branch\n, whereas the latest version of scikit-rebate in development is on the \ndevelopment branch\n. Make sure you are looking at and working on the correct branch if you're looking to contribute code.\n\n\nIn terms of directory structure:\n\n\n\n\nAll of ReBATE's code sources are in the base directory\n\n\nThe documentation sources are in the \ndocs_sources\n directory\n\n\nThe latest documentation build is in the \ndocs\n directory\n\n\nUnit tests for ReBATE are in the \ntests.py\n file\n\n\n\n\nMake sure to familiarize yourself with the project layout before making any major contributions, and especially make sure to send all code changes to the \ndevelopment\n branch.\n\n\nHow to contribute\n\n\nThe preferred way to contribute to ReBATE is to fork the \n\nmain repository\n on\nGitHub:\n\n\n\n\n\n\nFork the \nproject repository\n:\n   click on the 'Fork' button near the top of the page. This creates\n   a copy of the code under your account on the GitHub server.\n\n\n\n\n\n\nClone this copy to your local disk:\n\n\n  $ git clone git@github.com:YourLogin/ReBATE.git\n  $ cd ReBATE\n\n\n\n\n\n\n\nCreate a branch to hold your changes:\n\n\n  $ git checkout -b my-contribution\n\n\n\n\n\n\n\nMake sure your local environment is setup correctly for development. Installation instructions are almost identical to \nthe user instructions\n except that ReBATE should \nnot\n be installed. If you have ReBATE installed on your computer, then make sure you are using a virtual environment that does not have ReBATE installed. Furthermore, you should make sure you have installed the \nnose\n package into your development environment so that you can test changes locally.\n\n\n  $ conda install nose\n\n\n\n\n\n\n\nStart making changes on your newly created branch, remembering to never work on the \nmaster\n branch! Work on this copy on your computer using Git to do the version control.\n\n\n\n\n\n\nOnce some changes are saved locally, you can use your tweaked version of ReBATE by navigating to the project's base directory and running ReBATE in a script. You can use an example script in our \nexamples directory\n to begin your testing.\n\n\n\n\n\n\nTo check your changes haven't broken any existing tests and to check new tests you've added pass run the following (note, you must have the \nnose\n package installed within your dev environment for this to work):\n\n\n  $ nosetests -s -v\n\n\n\n\n\n\n\nWhen you're done editing and local testing, run:\n\n\n  $ git add modified_files\n  $ git commit\n\n\n\n\n\n\n\nto record your changes in Git, then push them to GitHub with:\n\n\n      $ git push -u origin my-contribution\n\n\n\nFinally, go to the web page of your fork of the ReBATE repo, and click 'Pull Request' (PR) to send your changes to the maintainers for review. Make sure that you send your PR to the \ndevelopment\n branch, as the \nmaster\n branch is reserved for the latest stable release. This will start the CI server to check all the project's unit tests run and send an email to the maintainers.\n\n\n(If any of the above seems like magic to you, then look up the \n\nGit documentation\n on the web.)\n\n\nBefore submitting your pull request\n\n\nBefore you submit a pull request for your contribution, please work through this checklist to make sure that you have done everything necessary so we can efficiently review and accept your changes.\n\n\nIf your contribution changes ReBATE in any way:\n\n\n\n\n\n\nUpdate the \ndocumentation\n so all of your changes are reflected there.\n\n\n\n\n\n\nUpdate the \nREADME\n if anything there has changed.\n\n\n\n\n\n\nIf your contribution involves any code changes:\n\n\n\n\n\n\nUpdate the \nproject unit tests\n to test your code changes.\n\n\n\n\n\n\nMake sure that your code is properly commented with \ndocstrings\n and comments explaining your rationale behind non-obvious coding practices.\n\n\n\n\n\n\nIf your contribution requires a new library dependency:\n\n\n\n\n\n\nDouble-check that the new dependency is easy to install via \npip\n or Anaconda and supports both Python 2 and 3. If the dependency requires a complicated installation, then we most likely won't merge your changes because we want to keep ReBATE easy to install.\n\n\n\n\n\n\nAdd a line to pip install the library to \n.travis_install.sh\n\n\n\n\n\n\nAdd a line to print the version of the library to \n.travis_install.sh\n\n\n\n\n\n\nSimilarly add a line to print the version of the library to \n.travis_test.sh\n\n\n\n\n\n\nUpdating the documentation\n\n\nWe use \nmkdocs\n to manage our \ndocumentation\n. This allows us to write the docs in Markdown and compile them to HTML as needed. Below are a few useful commands to know when updating the documentation. Make sure that you are running them in the base repository directory.\n\n\n\n\n\n\nmkdocs serve\n: Hosts of a local version of the documentation that you can access at the provided URL. The local version will update automatically as you save changes to the documentation.\n\n\n\n\n\n\nmkdocs build --clean\n: Creates a fresh build of the documentation in HTML. Always run this before deploying the documentation to GitHub.\n\n\n\n\n\n\nmkdocs gh-deploy\n: Deploys the documentation to GitHub. If you're deploying on your fork of ReBATE, the online documentation should be accessible at \nhttp://<YOUR GITHUB USERNAME>.github.io/ReBATE/\n. Generally, you shouldn't need to run this command because you can view your changes with \nmkdocs serve\n.\n\n\n\n\n\n\nAfter submitting your pull request\n\n\nAfter submitting your pull request, \nTravis-CI\n will automatically run unit tests on your changes and make sure that your updated code builds and runs on Python 2 and 3. We also use services that automatically check code quality and test coverage.\n\n\nCheck back shortly after submitting your pull request to make sure that your code passes these checks. If any of the checks come back with a red X, then do your best to address the errors.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#project-layout",
            "text": "The latest stable release of ReBATE is on the  master branch , whereas the latest version of scikit-rebate in development is on the  development branch . Make sure you are looking at and working on the correct branch if you're looking to contribute code.  In terms of directory structure:   All of ReBATE's code sources are in the base directory  The documentation sources are in the  docs_sources  directory  The latest documentation build is in the  docs  directory  Unit tests for ReBATE are in the  tests.py  file   Make sure to familiarize yourself with the project layout before making any major contributions, and especially make sure to send all code changes to the  development  branch.",
            "title": "Project layout"
        },
        {
            "location": "/contributing/#how-to-contribute",
            "text": "The preferred way to contribute to ReBATE is to fork the  main repository  on\nGitHub:    Fork the  project repository :\n   click on the 'Fork' button near the top of the page. This creates\n   a copy of the code under your account on the GitHub server.    Clone this copy to your local disk:    $ git clone git@github.com:YourLogin/ReBATE.git\n  $ cd ReBATE    Create a branch to hold your changes:    $ git checkout -b my-contribution    Make sure your local environment is setup correctly for development. Installation instructions are almost identical to  the user instructions  except that ReBATE should  not  be installed. If you have ReBATE installed on your computer, then make sure you are using a virtual environment that does not have ReBATE installed. Furthermore, you should make sure you have installed the  nose  package into your development environment so that you can test changes locally.    $ conda install nose    Start making changes on your newly created branch, remembering to never work on the  master  branch! Work on this copy on your computer using Git to do the version control.    Once some changes are saved locally, you can use your tweaked version of ReBATE by navigating to the project's base directory and running ReBATE in a script. You can use an example script in our  examples directory  to begin your testing.    To check your changes haven't broken any existing tests and to check new tests you've added pass run the following (note, you must have the  nose  package installed within your dev environment for this to work):    $ nosetests -s -v    When you're done editing and local testing, run:    $ git add modified_files\n  $ git commit    to record your changes in Git, then push them to GitHub with:        $ git push -u origin my-contribution  Finally, go to the web page of your fork of the ReBATE repo, and click 'Pull Request' (PR) to send your changes to the maintainers for review. Make sure that you send your PR to the  development  branch, as the  master  branch is reserved for the latest stable release. This will start the CI server to check all the project's unit tests run and send an email to the maintainers.  (If any of the above seems like magic to you, then look up the  Git documentation  on the web.)",
            "title": "How to contribute"
        },
        {
            "location": "/contributing/#before-submitting-your-pull-request",
            "text": "Before you submit a pull request for your contribution, please work through this checklist to make sure that you have done everything necessary so we can efficiently review and accept your changes.  If your contribution changes ReBATE in any way:    Update the  documentation  so all of your changes are reflected there.    Update the  README  if anything there has changed.    If your contribution involves any code changes:    Update the  project unit tests  to test your code changes.    Make sure that your code is properly commented with  docstrings  and comments explaining your rationale behind non-obvious coding practices.    If your contribution requires a new library dependency:    Double-check that the new dependency is easy to install via  pip  or Anaconda and supports both Python 2 and 3. If the dependency requires a complicated installation, then we most likely won't merge your changes because we want to keep ReBATE easy to install.    Add a line to pip install the library to  .travis_install.sh    Add a line to print the version of the library to  .travis_install.sh    Similarly add a line to print the version of the library to  .travis_test.sh",
            "title": "Before submitting your pull request"
        },
        {
            "location": "/contributing/#updating-the-documentation",
            "text": "We use  mkdocs  to manage our  documentation . This allows us to write the docs in Markdown and compile them to HTML as needed. Below are a few useful commands to know when updating the documentation. Make sure that you are running them in the base repository directory.    mkdocs serve : Hosts of a local version of the documentation that you can access at the provided URL. The local version will update automatically as you save changes to the documentation.    mkdocs build --clean : Creates a fresh build of the documentation in HTML. Always run this before deploying the documentation to GitHub.    mkdocs gh-deploy : Deploys the documentation to GitHub. If you're deploying on your fork of ReBATE, the online documentation should be accessible at  http://<YOUR GITHUB USERNAME>.github.io/ReBATE/ . Generally, you shouldn't need to run this command because you can view your changes with  mkdocs serve .",
            "title": "Updating the documentation"
        },
        {
            "location": "/contributing/#after-submitting-your-pull-request",
            "text": "After submitting your pull request,  Travis-CI  will automatically run unit tests on your changes and make sure that your updated code builds and runs on Python 2 and 3. We also use services that automatically check code quality and test coverage.  Check back shortly after submitting your pull request to make sure that your code passes these checks. If any of the checks come back with a red X, then do your best to address the errors.",
            "title": "After submitting your pull request"
        },
        {
            "location": "/releases/",
            "text": "ReBATE 0.2\n\n\n\n\n\n\nAdded documentation.\n\n\n\n\n\n\nAdded unit testing.\n\n\n\n\n\n\nAdded MultiSURF.\n\n\n\n\n\n\nUpdated ReBATE to include other updates made to scikit-rebate. \n\n\n\n\n\n\nReBATE 0.1\n\n\n\n\nInitial release of Relief algorithms, including ReliefF, SURF, SURF\n, MultSURF\n, and TuRF.",
            "title": "Release Notes"
        },
        {
            "location": "/releases/#rebate-02",
            "text": "Added documentation.    Added unit testing.    Added MultiSURF.    Updated ReBATE to include other updates made to scikit-rebate.",
            "title": "ReBATE 0.2"
        },
        {
            "location": "/releases/#rebate-01",
            "text": "Initial release of Relief algorithms, including ReliefF, SURF, SURF , MultSURF , and TuRF.",
            "title": "ReBATE 0.1"
        },
        {
            "location": "/citing/",
            "text": "If you use scikit-rebate or the MultiSURF algorithm in a scientific publication, please consider citing the following paper (currently available as a pre-print in arXiv):\n\n\nUrbanowicz, Ryan J., Randal S. Olson, Peter Schmitt, Melissa Meeker, and Jason H. Moore. \"Benchmarking relief-based feature selection methods.\" arXiv preprint arXiv:1711.08477 (2017).\n\n\nAlternatively a complete review of Relief-based algorithms is available at:\n\n\nUrbanowicz, Ryan J., Melissa Meeker, William LaCava, Randal S. Olson, and Jason H. Moore. \"Relief-based feature selection: introduction and review.\" arXiv preprint arXiv:1711.08421 (2017).\n\n\nTo cite the original Relief paper:\n\n\nKira, Kenji, and Larry A. Rendell. \"A practical approach to feature selection.\" In Machine Learning Proceedings 1992, pp. 249-256. 1992.\n\n\nTo cite the original ReliefF paper: \n\n\nKononenko, Igor. \"Estimating attributes: analysis and extensions of RELIEF.\" In European conference on machine learning, pp. 171-182. Springer, Berlin, Heidelberg, 1994.\n\n\nTo cite the original SURF paper:\n\n\nGreene, Casey S., Nadia M. Penrod, Jeff Kiralis, and Jason H. Moore. \"Spatially uniform relieff (SURF) for computationally-efficient filtering of gene-gene interactions.\" BioData mining 2, no. 1 (2009): 5.\n\n\nTo cite the original SURF* paper: \n\n\nGreene, Casey S., Daniel S. Himmelstein, Jeff Kiralis, and Jason H. Moore. \"The informative extremes: using both nearest and farthest individuals can improve relief algorithms in the domain of human genetics.\" In European Conference on Evolutionary Computation, Machine Learning and Data Mining in Bioinformatics, pp. 182-193. Springer, Berlin, Heidelberg, 2010.\n\n\nTo cite the original MultiSURF* paper:\n\n\nGranizo-Mackenzie, Delaney, and Jason H. Moore. \"Multiple threshold spatially uniform relieff for the genetic analysis of complex human diseases.\" In European Conference on Evolutionary Computation, Machine Learning and Data Mining in Bioinformatics, pp. 1-10. Springer, Berlin, Heidelberg, 2013.\n\n\nTo cite the original TuRF paper: \n\n\nMoore, Jason H., and Bill C. White. \"Tuning ReliefF for genome-wide genetic analysis.\" In European Conference on Evolutionary Computation, Machine Learning and Data Mining in Bioinformatics, pp. 166-175. Springer, Berlin, Heidelberg, 2007.",
            "title": "Citing"
        },
        {
            "location": "/support/",
            "text": "ReBATE was developed in the \nComputational Genetics Lab\n with funding from the \nNIH\n. We are incredibly grateful for their support during the development of this project.",
            "title": "Support"
        }
    ]
}